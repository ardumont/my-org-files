#+title: Nixos install
#+author: ardumont

- Boot on usb disk

- Log in as root (no pass by default)

- The first time around, we need to slice the disks accordingly using
  fdisk (legacy MBR) or parted (for UEFI partitions).

#+begin_src sh
parted /dev/sda -- mklabel gpt                           # gpt partition table
parted /dev/sda -- mkpart primary 512MiB -8GiB           # root partition
parted /dev/sda -- mkpart primary linux-swap -8GiB 100%  # swap
parted /dev/sda -- mkpart ESP fat32 1MiB 512Mib          # EFI system partition
parted /dev/sda -- set 3 boot on                         # used as /boot
#+end_src

- Now that the partition are done, we can create the filesystem
  accordingly (using labels to ease mounting later)

#+begin_src sh
mkfs.ext4 -L nixos /dev/sda1      # label 'nixos'
mkswap -L swap /dev/sda2          # label 'swap'
mkfs.fat -F 32 -n boot /dev/sda3  # label 'boot'
#+end_src

- Mount the partitions

#+begin_src sh
mount /dev/disk/by-label/nixos /mnt/
mkdir /mnt/boot && mount /dev/disk/by-label/boot /mnt/boot
swapon /dev/disk/by-label/swap
#+end_src

- Ask NixOS to generate the templates configuration.nix and
  hardware-configuration.nix (scanned from the previous operations).

#+begin_src sh
nixos-generate-config --root /mnt
#+end_src

- Activate the wifi (determine the wifi's ssid).

#+begin_src sh
wpa_passphrase <SSID> <PASSPHRASE> > /etc/wpa_supplicant.conf
#+end_src

*Note* This will generate the wpa supplicant expression.  Beware,
       there is an encrypted entry and a clear text entry you'll need
       to remove after.

- Restart the dedicated service

#+begin_src sh
systemctl restart wpa_supplicant.service
#+end_src

*Note* Now you should have access to internet (check the access
       restrictions, e.g. mac address filering on your box)

- Copy the wpa_supplicant.conf (to keep it after reboot)

#+begin_src sh
cp /etc/wpa_supplicant.conf /mnt/etc/
#+end_src

- (optional) Update the channel to the latest

#+begin_src sh
nix-channel --add https://nixos.org/channels/nixos-unstable
nix-channel --update
#+end_src

- Override the configuration.nix with your configuration (here I use
  mine)

#+begin_src sh
nix-env -i wget
wget https://raw.githubusercontent.com/ardumont/dot-files/master/etc/nixos/configuration.nix \
   --output-document /mnt/etc/nixos/configuration.nix
#+end_src

*Note* Update temporarily the configuration.nix file to add the
      `password` entry in the user section:

#+begin_src nix
    password = "dummy";
#+end_src
This way the user ends up having a "dummy" password (this way you can
connect on the login manager at next reboot).  Do not forget to
override (and remove) this from the configuration.nix at next reboot.

- Install NixOS

#+begin_src sh
nixos-install
#+end_src

*Note* This can be long due to the network (I have a real slow one).

- Reboot

#+begin_src sh
reboot
#+end_src

- Log as root again (no password remember :)

*Note* Assume that the `configuration.nix` did not start the xserver.

- Input a password for the root user

#+begin_src sh
passwd
#+end_src

- Input a password for your standard user (user are declared in the configuration.nix file)

#+begin_src sh
passwd tony
#+end_src

*Note* You could fill the password in configuration.nix

- And now a replicated nixos install from the software point of view

- I now retrieve my home backup from elsewhere (nas rsync for example)
  or clone my git repositories.

- When the backup is installed, I have a fully compliant replicated
  machine
